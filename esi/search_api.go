/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.1.dev2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package esi

import (
	"net/url"
	"strings"
	"io/ioutil"
	"encoding/json"
	"fmt"
)

type SearchApiService service


/**
 * Search on a string
 * Search for entities that match a given sub-string.  ---  Alternate route: &#x60;/v2/characters/{character_id}/search/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/search/&#x60;   ---  This route is cached for up to 3600 seconds
 *
 * @param characterId An EVE character ID 
 * @param search The string to search on 
 * @param categories Type of entities to search for 
 * @param language(nil) Search locale 
 * @param strict(nil) Whether the search should be a strict match 
 * @param datasource(nil) The server name you would like data from 
 * @return *GetCharactersCharacterIdSearchOk
 */
func (a SearchApiService) GetCharactersCharacterIdSearch(characterId int32, search string, categories []string, language interface{}, strict interface{}, datasource interface{}) (*GetCharactersCharacterIdSearchOk,  error) {
	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := "https://esi.tech.ccp.is/latest/characters/{character_id}/search/"
	localVarPath = strings.Replace(localVarPath, "{"+"character_id"+"}", fmt.Sprintf("%v", characterId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(evesso)' required
	// oauth required
	if a.client.Config.AccessToken != ""{
		localVarHeaderParams["Authorization"] =  "Bearer " + a.client.Config.AccessToken
	}

	if err := a.client.typeCheckParameter(language, "string", "language"); err != nil {
		return nil, err
	}
	if err := a.client.typeCheckParameter(strict, "bool", "strict"); err != nil {
		return nil, err
	}
	if err := a.client.typeCheckParameter(datasource, "string", "datasource"); err != nil {
		return nil, err
	}
		localVarQueryParams.Add("search", a.client.parameterToString(search, ""))
		localVarQueryParams.Add("categories", a.client.parameterToString(categories, "csv"))
	if language != nil {
		localVarQueryParams.Add("language", a.client.parameterToString(language, ""))
	}
	if strict != nil {
		localVarQueryParams.Add("strict", a.client.parameterToString(strict, ""))
	}
	if datasource != nil {
		localVarQueryParams.Add("datasource", a.client.parameterToString(datasource, ""))
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.client.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.client.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	 var successPayload = new(GetCharactersCharacterIdSearchOk)

	 r, err := a.client.prepareRequest(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes, localVarHttpContentType)
	 if err != nil {
		  return successPayload, err
	 }

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return successPayload, err
	 }

	 defer localVarHttpResponse.Body.Close()
	 buf, err := ioutil.ReadAll(localVarHttpResponse.Body)
	 if err != nil {
		  return nil, err
	 }

	 err = json.Unmarshal([]byte(buf), &successPayload)

	return successPayload, err
}

/**
 * Search on a string
 * Search for entities that match a given sub-string.  ---  Alternate route: &#x60;/v1/search/&#x60;  Alternate route: &#x60;/legacy/search/&#x60;  Alternate route: &#x60;/dev/search/&#x60;   ---  This route is cached for up to 3600 seconds
 *
 * @param search The string to search on 
 * @param categories Type of entities to search for 
 * @param language(nil) Search locale 
 * @param strict(nil) Whether the search should be a strict match 
 * @param datasource(nil) The server name you would like data from 
 * @return *GetSearchOk
 */
func (a SearchApiService) GetSearch(search string, categories []string, language interface{}, strict interface{}, datasource interface{}) (*GetSearchOk,  error) {
	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := "https://esi.tech.ccp.is/latest/search/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte

	if err := a.client.typeCheckParameter(language, "string", "language"); err != nil {
		return nil, err
	}
	if err := a.client.typeCheckParameter(strict, "bool", "strict"); err != nil {
		return nil, err
	}
	if err := a.client.typeCheckParameter(datasource, "string", "datasource"); err != nil {
		return nil, err
	}
		localVarQueryParams.Add("search", a.client.parameterToString(search, ""))
		localVarQueryParams.Add("categories", a.client.parameterToString(categories, "csv"))
	if language != nil {
		localVarQueryParams.Add("language", a.client.parameterToString(language, ""))
	}
	if strict != nil {
		localVarQueryParams.Add("strict", a.client.parameterToString(strict, ""))
	}
	if datasource != nil {
		localVarQueryParams.Add("datasource", a.client.parameterToString(datasource, ""))
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.client.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.client.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	 var successPayload = new(GetSearchOk)

	 r, err := a.client.prepareRequest(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes, localVarHttpContentType)
	 if err != nil {
		  return successPayload, err
	 }

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return successPayload, err
	 }

	 defer localVarHttpResponse.Body.Close()
	 buf, err := ioutil.ReadAll(localVarHttpResponse.Body)
	 if err != nil {
		  return nil, err
	 }

	 err = json.Unmarshal([]byte(buf), &successPayload)

	return successPayload, err
}

