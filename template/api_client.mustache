{{>partial_header}}
package {{packageName}}

import (
	"bytes"
	"fmt"
	"path/filepath"
	"reflect"
	"strings"
	"net/url"
    "errors"
	"io/ioutil"
	"github.com/go-resty/resty"
)

type APIClient struct {
	 Config	*Configuration
	 rClient *resty.Client
	 common	service // Reuse a single struct instead of allocating one for each service on the heap.

	 // API Services
{{#apiInfo}}
{{#apis}}
{{#operations}}
	 {{classname}}	  *{{classname}}Service
{{/operations}}
{{/apis}}
{{/apiInfo}}
}

type service struct {
	 client	*APIClient
}

func NewAPIClient(configuration *Configuration) *APIClient {
	 if configuration == nil {
		  configuration = NewConfiguration()
	 }	

	 c := &APIClient{}
	 c.common.client = c
	 c.Config = configuration
	 c.rClient = c.prepareClient()

{{#apiInfo}}
{{#apis}}
{{#operations}}
	 c.{{classname}} = (*{{classname}}Service)(&c.common)
{{/operations}}
{{/apis}}
{{/apiInfo}}

	 return c
}

func (c *APIClient) SelectHeaderContentType(contentTypes []string) string {

	if len(contentTypes) == 0 {
		return ""
	}
	if contains(contentTypes, "application/json") {
		return "application/json"
	}
	return contentTypes[0] // use the first content type specified in 'consumes'
}

func (c *APIClient) SelectHeaderAccept(accepts []string) string {

	if len(accepts) == 0 {
		return ""
	}
	if contains(accepts, "application/json") {
		return "application/json"
	}
	return strings.Join(accepts, ",")
}

func contains(haystack []string, needle string) bool {
	for _, a := range haystack {
		if strings.ToLower(a) == strings.ToLower(needle) {
			return true
		}
	}
	return false
}

func (c *APIClient) CallAPI(path string, method string,
	postBody interface{},
	headerParams map[string]string,
	queryParams url.Values,
	formParams map[string]string,
	fileName string,
	fileBytes []byte) (*resty.Response, error) {

	request := c.prepareRequest(postBody, headerParams, queryParams, formParams, fileName, fileBytes)

	switch strings.ToUpper(method) {
	case "GET":
		response, err := request.Get(path)
		return response, err
	case "POST":
		response, err := request.Post(path)
		return response, err
	case "PUT":
		response, err := request.Put(path)
		return response, err
	case "PATCH":
		response, err := request.Patch(path)
		return response, err
	case "DELETE":
		response, err := request.Delete(path)
		return response, err
	}

	return nil, fmt.Errorf("invalid method %v", method)
}

func (c *APIClient) parameterToString(obj interface{}, collectionFormat string) string {
	delimiter := ""
	switch collectionFormat {
	case "pipes":
		delimiter = "|"
	case "ssv":
		delimiter = " "
	case "tsv":
		delimiter = "\t"
	case "csv":
		delimiter = ","
	}

	if reflect.TypeOf(obj).Kind() == reflect.Slice {
		return strings.Trim(strings.Replace(fmt.Sprint(obj), " ", delimiter, -1), "[]")
	}

	return fmt.Sprintf("%v", obj)
}
// Verify optional parameters are of the correct type.
func (c *APIClient) typeCheckParameter(obj interface{}, expected string, name string) error {
    // Make sure there is an object.
    if obj == nil {
        return nil    
    }

    // Check the type is as expected.
	if reflect.TypeOf(obj).String() != expected {
        return errors.New(fmt.Sprintf("Expected %s to be of type %s but received %s.", name, expected, reflect.TypeOf(obj).String()))
	}
	return nil
}

func (c *APIClient) prepareClient() *resty.Client {

	 rClient := resty.New()

	rClient.SetDebug(c.Config.Debug)
	if c.Config.Transport != nil {
		rClient.SetTransport(c.Config.Transport)
	}

	if c.Config.Timeout != nil {
		rClient.SetTimeout(*c.Config.Timeout)
	}
	rClient.SetLogger(ioutil.Discard)
	return rClient
}

func (c *APIClient) prepareRequest(
	postBody interface{},
	headerParams map[string]string,
	queryParams url.Values,
	formParams map[string]string,
	fileName string,
	fileBytes []byte) *resty.Request {

	request := c.rClient.R()
	request.SetBody(postBody)

	if c.Config.UserAgent != "" {
		request.SetHeader("User-Agent", c.Config.UserAgent)
	}

	// add header parameter, if any
	if len(headerParams) > 0 {
		request.SetHeaders(headerParams)
	}

	// add query parameter, if any
	if len(queryParams) > 0 {
		request.SetMultiValueQueryParams(queryParams)
	}

	// add form parameter, if any
	if len(formParams) > 0 {
		request.SetFormData(formParams)
	}

	if len(fileBytes) > 0 && fileName != "" {
		_, fileNm := filepath.Split(fileName)
		request.SetFileReader("file", fileNm, bytes.NewReader(fileBytes))
	}
	return request
}