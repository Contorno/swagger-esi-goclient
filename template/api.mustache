{{>partial_header}}
package {{packageName}}

{{#operations}}
import (
	"net/url"
	"strings"
	"time"
	"errors"
	"golang.org/x/net/context"
{{#imports}}	"{{import}}"
{{/imports}}
)

var _ context.Context

type {{classname}}Service service

{{#operation}}

/**
 * {{summary}}{{#notes}}
 * {{notes}}{{/notes}}
 *
{{#allParams}} * @param {{paramName}}{{^required}}{{#isPrimitiveType}}({{{dataType}}}){{/isPrimitiveType}}{{/required}} {{description}} 
{{/allParams}} * @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}nil{{/returnType}}
 */
func (a {{{classname}}}Service) {{{nickname}}}({{#authMethods}}ctx context.Context, {{/authMethods}}{{#allParams}}{{paramName}} {{#required}}{{{dataType}}}{{/required}}{{^required}}{{#isPrimitiveType}}interface{}{{/isPrimitiveType}}{{^isPrimitiveType}}{{{dataType}}}{{/isPrimitiveType}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) ({{#returnType}}{{{returnType}}}, {{/returnType}} time.Time, error) {
	var (
		localVarHttpMethod = strings.ToUpper("{{httpMethod}}")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
{{#returnType}}
	 	successPayload  {{returnType}}
{{/returnType}}
	)

	// create path and map variables
	localVarPath := "{{{basePath}}}{{path}}"{{#pathParams}}
	localVarPath = strings.Replace(localVarPath, "{"+"{{baseName}}"+"}", fmt.Sprintf("%v", {{paramName}}), -1){{/pathParams}}

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

{{#allParams}}
{{^required}}
{{#isPrimitiveType}}
	if err := a.client.typeCheckParameter({{paramName}}, "{{{dataType}}}", "{{paramName}}"); err != nil {
		return {{#returnType}}successPayload, {{/returnType}}time.Now(), err
	}
{{/isPrimitiveType}}
{{/required}}
{{/allParams}}
	{{#hasQueryParams}}
	{{#queryParams}}
	{{^required}}
	if {{paramName}} != nil {
    {{/required}}
	{{#isListContainer}}
		localVarQueryParams.Add("{{baseName}}", a.client.parameterToString({{paramName}}, "{{collectionFormat}}"))
	{{/isListContainer}}
	{{^isListContainer}}
		localVarQueryParams.Add("{{baseName}}", a.client.parameterToString({{paramName}}, ""))
	{{/isListContainer}}
    {{^required}}
	}
    {{/required}}
	{{/queryParams}}
	{{/hasQueryParams}}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		{{#produces}}
		"{{{mediaType}}}",
		{{/produces}}
		}

	// set Accept header
	localVarHttpHeaderAccept := a.client.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
{{#hasHeaderParams}}
{{#headerParams}}
	// header params "{{baseName}}"
	localVarHeaderParams["{{baseName}}"] = a.client.parameterToString({{paramName}}, "")
{{/headerParams}}
{{/hasHeaderParams}}
{{#hasFormParams}}
{{#formParams}}
{{#isFile}}
	 fbs, _ := ioutil.ReadAll(file)
	 localVarFileBytes = fbs
	 localVarFileName = file.Name()
{{/isFile}}
{{^isFile}}
	 localVarFormParams.Add(["{{paramName}}"], a.client.parameterToString({{paramName}}, ""))
{{/isFile}}
{{/formParams}}
{{/hasFormParams}}
{{#hasBodyParam}}
{{#bodyParams}}	// body params
	 localVarPostBody = &{{paramName}}
{{/bodyParams}}
{{/hasBodyParam}}


	 r, err := a.client.prepareRequest({{#authMethods}}ctx{{/authMethods}}{{^authMethods}}nil{{/authMethods}}, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes, "application/json")
	 if err != nil {
		  return {{#returnType}}successPayload, {{/returnType}}time.Now(), err
	 }

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return {{#returnType}}successPayload, {{/returnType}}time.Now(), err
	 }
	 defer localVarHttpResponse.Body.Close()
	 if localVarHttpResponse.StatusCode >= 300 {
		return {{#returnType}}successPayload, {{/returnType}}time.Now(), errors.New(localVarHttpResponse.Status)
	 }
{{#returnType}}
	
	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
	 	return {{#returnType}}successPayload, {{/returnType}}time.Now(), err
	}

{{/returnType}}
	expires := cacheExpires(localVarHttpResponse)
	return {{#returnType}}successPayload, {{/returnType}}expires, err
}
{{/operation}}{{/operations}}
